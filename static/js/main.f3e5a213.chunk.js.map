{"version":3,"sources":["../../src/index.ts","../../src/storageHook.ts","example.tsx","App.tsx","index.tsx"],"names":["SavedTextarea","useStorage","placeholder","text","setText","onChange","e","target","value","App","React","PureComponent","SelfFrame","window","location","search","src","SavedCheckbox","checked","setChecked","type","ReactDOM","render","document","getElementById"],"mappings":"+LAAA,YAQE,aALA,aAWF,UAAe,c,sQCdf,YACI,EAAJ,QAoCa,aAAa,SACtB,EADsB,GAMuB,IAHzC,EAGyC,EAHzC,YAGyC,IAFzC,mBAEyC,MAF3B,OAAO,aAEoB,EACzC,EAAe,EAAY,QAAQ,GAErC,GAAE,EACA,IACI,EAAe,KAAK,MAAM,GAC5B,MAAO,IANgC,MASnB,EAAM,SAC5B,EAAc,SAAO,GAAe,GAVK,SAStC,EATsC,KAS/B,EAT+B,KAgBvC,EAAY,YAEG,IADjB,EACiB,EADjB,IAAK,EACY,EADZ,SAAU,EACE,EADF,SAAuB,EACrB,EADQ,YASzB,GAAK,IAAQ,GAAoB,MAAZ,GAAoB,IAAa,GAC/C,IAAgB,EAEvB,OAAO,EAAS,SAAO,KAAK,MAAM,MAIhC,EAAa,EAAM,aAAY,SAAC,GAClC,IAAM,EAAW,EAAY,QAAQ,GAC/B,EAAW,KAAK,UAAU,GAChC,EAAY,QAAQ,EAAM,GAI1B,EAAU,CACN,IAAK,EACL,WACA,WACA,kBAEL,CAAC,EAAM,EAAa,IAWvB,OARA,EAAM,WAAU,WAGZ,OAFA,OAAO,iBAAiB,UAAW,GAE5B,WACH,OAAO,oBAAoB,UAAW,MAE3C,IAEI,CAAC,OAAO,OAAO,GAAQ,K,4HCjGrBA,EAAgB,WAAO,IAAD,EACTC,qBAAW,aAAc,CAC/CC,YAAa,KAFkB,mBAC1BC,EAD0B,KACpBC,EADoB,KAQjC,OAAO,6BAAc,CACnBC,SAJe,SAACC,GAAD,OAA0BF,EACxCE,EAAEC,OAA4BC,QAI/BA,MAAOL,KCRUM,E,iLAEjB,OACE,6BACE,4BADF,iGAGE,4BAAI,kBAAC,EAAD,MACJ,4BAAI,kBAAC,EAAD,MACJ,4BALF,iGAOE,4BAAI,kBAAC,EAAD,W,GAVqBC,IAAMC,eAgBjCC,EAAY,WAChB,MAA4B,WAAxBC,OAAOC,SAASC,OAA0B,KACvC,4BAAQC,IAAI,aAGfC,EAAgB,WAAO,IAAD,EACIhB,qBAAW,yBAA0B,CACjEC,aAAa,IAFW,mBACnBgB,EADmB,KACVC,EADU,KAO1B,OAAO,0BAAW,CAChBD,UACAb,SAJe,SAACC,GAAD,OAA0Ba,EAAYb,EAAEC,OAA4BW,UAKnFE,KAAM,cC/BVC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f3e5a213.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst storageHook_1 = require(\"./storageHook\");\nexports.useStorage = storageHook_1.useStorage;\nexports.default = storageHook_1.useStorage;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst immutable_1 = require(\"immutable\");\nconst React = __importStar(require(\"react\"));\n/**\n * A React hook for synchronized use of localStorage,\n * sessionStorage etc\n * @param name Name of the localStorage key\n * @param placeholder Default value if nothing stored\n * @param storageArea Storage to use (default window.localStorage)\n */\nexports.useStorage = (name, { placeholder, storageArea = window.localStorage }) => {\n    let currentValue = storageArea.getItem(name);\n    if (currentValue) {\n        try {\n            currentValue = JSON.parse(currentValue);\n        }\n        catch (e) { }\n    }\n    const [value, setValue] = React.useState(currentValue ? immutable_1.fromJS(currentValue) : placeholder);\n    // handle a storage event in our chosen storageArea\n    const onStorage = ({ key, oldValue, newValue, storageArea: eventStorageArea }) => {\n        // if it's not our record, the value has not changed,\n        // or it's for another storage area we skip.\n        //\n        // there could, or perhaps *should* be an extra check\n        // of if our local value differs from the stored value,\n        // but React should handle this internally.\n        if (key !== name || newValue == null || oldValue === newValue\n            || storageArea !== eventStorageArea)\n            return;\n        return setValue(immutable_1.fromJS(JSON.parse(newValue)));\n    };\n    // set a new stored value\n    const setStorage = React.useCallback((value) => {\n        const oldValue = storageArea.getItem(name);\n        const newValue = JSON.stringify(value);\n        storageArea.setItem(name, newValue);\n        // fire an event. onStorage only fires between windows\n        // so this is needed to ensure we update ourselves.\n        onStorage({\n            key: name,\n            newValue,\n            oldValue,\n            storageArea\n        });\n    }, [name, storageArea, onStorage]);\n    // listen to storage events on mount and unmount\n    React.useEffect(() => {\n        window.addEventListener('storage', onStorage);\n        return () => {\n            window.removeEventListener('storage', onStorage);\n        };\n    }, []);\n    return [Object.freeze(value), setStorage];\n};\n//# sourceMappingURL=storageHook.js.map","import React from 'react'\nimport { useStorage } from 'react-storage-hook'\n\nexport const SavedTextarea = () => {\n  const [text, setText] = useStorage('saved-text', {\n    placeholder: \"\"\n  });\n\n  const onChange = (e: React.ChangeEvent) => setText(\n    (e.target as HTMLInputElement).value);\n\n  return <textarea {...{\n    onChange,\n    value: text\n  }}/>\n}\n","import React from 'react'\n\nimport { useStorage } from 'react-storage-hook'\nimport { SavedTextarea } from './example'\n\nexport default class App extends React.PureComponent {\n  render () {\n    return (\n      <div>\n        <p/>Any input entered here will be saved, and\n        propagated to any other open instances of this page.\n        <p/><SavedCheckbox/>\n        <p/><SavedTextarea/>\n        <p/>Here's another instance of this page.\n        There's no direct communication between these instances.\n        <p/><SelfFrame/>\n      </div>\n    )\n  }\n}\n\nconst SelfFrame = () => {\n  if (window.location.search==\"?framed\") return null;\n  return <iframe src=\"?framed\"/>\n}\n\nconst SavedCheckbox = () => {\n  const [checked, setChecked] = useStorage('saved-checkbox-checked', {\n    placeholder: false\n  });\n\n  const onChange = (e: React.ChangeEvent) => setChecked((e.target as HTMLInputElement).checked);\n\n  return <input {...{\n    checked,\n    onChange,\n    type: \"checkbox\"\n  }}/>\n\n}\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}